-- ─────────────────────────────────────────────────────────
-- Reference tables
-- ─────────────────────────────────────────────────────────
CREATE TABLE branches (
  id           INT AUTO_INCREMENT PRIMARY KEY,
  code         VARCHAR(10) NOT NULL UNIQUE,
  name         VARCHAR(100) NOT NULL,
  city         VARCHAR(100),
  created_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Users (single table for admin/agent/customer)
CREATE TABLE users (
  id               BIGINT AUTO_INCREMENT PRIMARY KEY,
  name             VARCHAR(100) NOT NULL,
  mobile           VARCHAR(20)  NOT NULL UNIQUE,
  email            VARCHAR(150) UNIQUE,
  password_hash    VARCHAR(255) NOT NULL,
  role             ENUM('admin','agent','user') NOT NULL,
  is_super_admin   TINYINT(1) NOT NULL DEFAULT 0,
  branch_id        INT,
  status           ENUM('active','inactive') NOT NULL DEFAULT 'active',
  created_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_users_branch FOREIGN KEY (branch_id) REFERENCES branches(id)
) ENGINE=InnoDB;

-- Optional: store KYC/extra customer info
CREATE TABLE customer_profiles (
  id             BIGINT AUTO_INCREMENT PRIMARY KEY,
  user_id        BIGINT NOT NULL UNIQUE,
  address       VARCHAR(500),
  place          VARCHAR(150),
  pincode        VARCHAR(20),
  dob            DATE,
  anniversary    DATE,
  aadhaar        VARCHAR(20),
  pan            VARCHAR(25),
  nominee_name   VARCHAR(100),
  nominee_mobile VARCHAR(20),
  nominee_relation VARCHAR(50),
  created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_custprof_user FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB;

-- Agents: extra fields for agents (area mapping etc.)
CREATE TABLE agents (
  id           BIGINT AUTO_INCREMENT PRIMARY KEY,
  user_id      BIGINT NOT NULL UNIQUE,
  area         VARCHAR(150),
  notes        VARCHAR(255),
  created_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at   DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_agents_user FOREIGN KEY (user_id) REFERENCES users(id),
  INDEX idx_agents_area (area)
) ENGINE=InnoDB;

-- ─────────────────────────────────────────────────────────
-- Scheme master (your old scheme_groups)
-- ─────────────────────────────────────────────────────────
CREATE TABLE scheme_groups (
  id                 BIGINT AUTO_INCREMENT PRIMARY KEY,
  group_code         VARCHAR(20) NOT NULL UNIQUE,
  description        VARCHAR(100),
  amount_per_inst    DECIMAL(12,2),             -- AMOUNT
  no_of_members      INT,
  start_no           INT,
  no_of_inst         INT,                       -- installments
  is_flexible        TINYINT(1) DEFAULT 0,
  is_gold_scheme     TINYINT(1) DEFAULT 0,
  bonus              INT DEFAULT 0,
  total_balance_amt  DECIMAL(14,2) DEFAULT 0,   -- running total (optional)
  total_gold_balance DECIMAL(12,3) DEFAULT 0,   -- running total (optional)
  note               VARCHAR(255),
  branch_id          INT,
  is_closed          TINYINT(1) DEFAULT 0,
  created_at         DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  closed_date        DATE,
  sync_status        VARCHAR(10),
  CONSTRAINT fk_sgroups_branch FOREIGN KEY (branch_id) REFERENCES branches(id),
  INDEX idx_sgroups_branch (branch_id),
  INDEX idx_sgroups_closed (is_closed)
) ENGINE=InnoDB;

-- ─────────────────────────────────────────────────────────
-- Memberships (your old scheme_members)
-- One row per customer subscribed to a scheme group.
-- ─────────────────────────────────────────────────────────
CREATE TABLE scheme_memberships (
  id               BIGINT AUTO_INCREMENT PRIMARY KEY,
  group_id         BIGINT NOT NULL,
  customer_user_id BIGINT NOT NULL,
  member_no        INT,
  inst_amount      DECIMAL(12,2),          -- per-installment for this member (can override group default)
  join_date        DATETIME,
  maturity_date    DATE,
  status           ENUM('active','closed','suspended') DEFAULT 'active',
  collection_type  ENUM('S','C') DEFAULT 'S',  -- self/collection
  metal_name       VARCHAR(20),
  silver_balance   DECIMAL(16,3),
  last_modified    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  introduced_by_user_id BIGINT,
  introducer_relation VARCHAR(30),
  branch_id        INT,
  notes            VARCHAR(255),
  is_closed        TINYINT(1) DEFAULT 0,
  CONSTRAINT fk_sm_group   FOREIGN KEY (group_id) REFERENCES scheme_groups(id),
  CONSTRAINT fk_sm_customer FOREIGN KEY (customer_user_id) REFERENCES users(id),
  CONSTRAINT fk_sm_introducer FOREIGN KEY (introduced_by_user_id) REFERENCES users(id),
  CONSTRAINT fk_sm_branch FOREIGN KEY (branch_id) REFERENCES branches(id),
  UNIQUE KEY uk_sm_group_memberno (group_id, member_no),
  INDEX idx_sm_customer (customer_user_id),
  INDEX idx_sm_status (status)
) ENGINE=InnoDB;

-- Optional mapping: assign members to agents (by admin or auto by area)
CREATE TABLE agent_assignments (
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,
  agent_user_id   BIGINT NOT NULL,
  membership_id   BIGINT NOT NULL,
  assigned_by     BIGINT NOT NULL,             -- admin user id
  assigned_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_aa_agent  FOREIGN KEY (agent_user_id) REFERENCES users(id),
  CONSTRAINT fk_aa_member FOREIGN KEY (membership_id) REFERENCES scheme_memberships(id),
  CONSTRAINT fk_aa_admin  FOREIGN KEY (assigned_by) REFERENCES users(id),
  UNIQUE KEY uk_aa (agent_user_id, membership_id)
) ENGINE=InnoDB;

-- ─────────────────────────────────────────────────────────
-- Payments (your old scheme_payment)
-- ─────────────────────────────────────────────────────────
CREATE TABLE scheme_payments (
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,
  receipt_no      VARCHAR(30),
  receipt_date    DATE,
  membership_id   BIGINT NOT NULL,      -- replaces cust_id
  receipt_type    ENUM('R','P') DEFAULT 'R',  -- R=receipt, P=payment/refund
  amount          DECIMAL(12,2) NOT NULL,
  metal_wt        DECIMAL(12,3),
  metal_rate      DECIMAL(12,2),
  mode_primary    ENUM('cash','upi','card','netbank','wallet','other'),
  mode1_amount    DECIMAL(12,2),
  mode_secondary  ENUM('cash','upi','card','netbank','wallet','other'),
  mode2_amount    DECIMAL(12,2),
  recorded_in     ENUM('App','Online','Backoffice') DEFAULT 'App',
  staff_user_id   BIGINT,
  remarks         VARCHAR(1000),
  bank            VARCHAR(100),
  inst_no         INT,                            -- installment number credited
  cancelled_amount DECIMAL(12,2),
  cancel_note     VARCHAR(500),
  created_at      DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  created_time    TIME,
  sync_status     VARCHAR(10),
  branch_id       INT,
  status          ENUM('completed','cancelled') DEFAULT 'completed',
  CONSTRAINT fk_pay_member FOREIGN KEY (membership_id) REFERENCES scheme_memberships(id),
  CONSTRAINT fk_pay_staff FOREIGN KEY (staff_user_id) REFERENCES users(id),
  CONSTRAINT fk_pay_branch FOREIGN KEY (branch_id) REFERENCES branches(id),
  INDEX idx_pay_date (receipt_date),
  INDEX idx_pay_member (membership_id),
  INDEX idx_pay_status (status)
) ENGINE=InnoDB;

-- ─────────────────────────────────────────────────────────
-- OTP approvals (for destructive actions like deleting admin/agent)
-- ─────────────────────────────────────────────────────────
CREATE TABLE otp_requests (
  id             BIGINT AUTO_INCREMENT PRIMARY KEY,
  action         VARCHAR(50) NOT NULL,      -- e.g., 'DELETE_ADMIN','DELETE_AGENT'
  target_user_id BIGINT NOT NULL,           -- the admin/agent being deleted
  requested_by   BIGINT NOT NULL,           -- who initiated the action
  superadmin_user_id BIGINT NOT NULL,       -- the hardcoded SA user
  otp_code       VARCHAR(10) NOT NULL,
  expires_at     DATETIME NOT NULL,
  verified_at    DATETIME,
  status         ENUM('pending','verified','expired','cancelled') DEFAULT 'pending',
  created_at     DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_otp_target FOREIGN KEY (target_user_id) REFERENCES users(id),
  CONSTRAINT fk_otp_reqby  FOREIGN KEY (requested_by) REFERENCES users(id),
  CONSTRAINT fk_otp_sa     FOREIGN KEY (superadmin_user_id) REFERENCES users(id),
  INDEX idx_otp_status (status),
  INDEX idx_otp_expires (expires_at)
) ENGINE=InnoDB;

-- ─────────────────────────────────────────────────────────
-- Audit log (optional but recommended)
-- ─────────────────────────────────────────────────────────
CREATE TABLE audit_logs (
  id            BIGINT AUTO_INCREMENT PRIMARY KEY,
  user_id       BIGINT,
  action        VARCHAR(100) NOT NULL,
  entity        VARCHAR(100),
  entity_id     BIGINT,
  details       JSON,
  created_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_audit_user FOREIGN KEY (user_id) REFERENCES users(id),
  INDEX idx_audit_entity (entity, entity_id),
  INDEX idx_audit_user (user_id)
) ENGINE=InnoDB;
